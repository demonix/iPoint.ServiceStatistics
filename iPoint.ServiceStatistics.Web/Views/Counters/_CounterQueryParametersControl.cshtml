@using System.Collections.Specialized
@using System.Globalization
@model iPoint.ServiceStatistics.Web.Models.CounterQueryParameters

<script src="@Url.Content("~/Scripts/jquery-ui-1.8.17.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery-ui.timepicker.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery-ui.datepicker-ru.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery-ui.timepicker-ru.js")" type="text/javascript"></script>


<link rel="stylesheet" href="@Url.Content("~/Content/themes/base/jquery-ui-1.8.17.custom.css")" />
<link rel="stylesheet" href="@Url.Content("~/Content/themes/base/jquery.ui.datepicker.css")" />
<link rel="stylesheet" href="@Url.Content("~/Content/themes/base/jquery.ui.slider.css")"  />
<link rel="stylesheet" href="@Url.Content("~/Content/themes/base/jquery.ui.timepicker.css")"  />
<link rel="stylesheet" href="@Url.Content("~/Content/themes/base/jquery.ui.resizable.css")"  />

<script src="@Url.Content("~/Scripts/flot/jquery.flot.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/flot/jquery.flot.fillbetween.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/flot/jquery.flot.selection.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/flot/jquery.flot.curvedlines.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/countersDataUpdater.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/drawingSurface.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.base64.js")" type="text/javascript"></script>
<!--script src="@Url.Content("~/Scripts/date.js")" type="text/javascript"></script-->
<script src="@Url.Content("~/Scripts/date-ru-RU.js")" type="text/javascript"></script>
@*<script src="@Url.Content("~/Scripts/drawer.js")" type="text/javascript"></script>*@
@*
<!--script src="@Url.Content("~/Scripts/flot/excanvas.js")" type="text/javascript"></script-->

<!--script type="text/javascript">
    $(function() {
        yepnope([{
            test: Modernizr.canvas,
            nope: "@Url.Content("~/Scripts/flot/excanvas.js")"
        }]);
    })
</script-->
*@


<script type="text/javascript">
    $(function () {

        $.getJSON("/Counters/CounterCategories", { sd: $("#StartDate").val(), ed: $("#EndDate").val() }, function (data) {
            setSelectorItems(data, "#CounterCategory");
        });

        $("#CounterCategory").change(function () {
            $.getJSON("/Counters/CounterNames", { sd: $("#StartDate").val(), ed: $("#EndDate").val(), cc: $("#CounterCategory").val() }, function (data) {
                setSelectorItems(data, "#CounterName");
            });

        });

        $("#CounterName").change(function () {
            $.getJSON("/Counters/CounterDetails", { sd: $("#StartDate").val(), ed: $("#EndDate").val(), cc: $("#CounterCategory").val(), cn: $("#CounterName").val() }, function (data) {
                setSelectorItems(data.Sources, "#CounterSource");
                setSelectorItems(data.Instances, "#CounterInstance");
                setSelectorItems(data.ExtDatas, "#CounterExtData");
            });
        });


        function sorter(a, b) {
            if (a.Value === -1)
                return -1;
            if (b.Value === -1)
                return 1;
            if (a.Text === "ALL_SOURCES" || a.Text === "ALL_INSTANCES" || a.Text === "ALL_EXTDATA")
                return -1;

            if (b.Text === "ALL_SOURCES" || b.Text === "ALL_INSTANCES" || b.Text === "ALL_EXTDATA")
                return 1;
            
            if (a.Text < b.Text)
                return -1;
            if (a.Text > b.Text)
                return 1;
            return 0;
        }

        function setSelectorItems(data, category) {
            var ccSelector = $(category);
            ccSelector.empty();
            if (data.length > 2 && category != "#CounterCategory")
                ccSelector.append($("<option/>", { value: -1, text: "EVERY" }));
            data.sort(sorter);
            $.each(data, function (index, item) {
                if (index == 0)
                    ccSelector.append($("<option/>", { value: item.Value, text: item.Text, selected: "selected" }));
                else
                    ccSelector.append($("<option/>", { value: item.Value, text: item.Text }));
            });

            ccSelector.change();
        }
    });
</script>

<div id="initalparameter">
    <table width="100%">
        <tr>
            <td>
                @Html.LabelFor(cModel => cModel.CounterCategory)
                @Html.DropDownListFor(cModel => cModel.CounterCategory, Model.CounterCategories, new { @class = "queryParameter" })
            </td>
            <td>
                @Html.LabelFor(cModel => cModel.CounterName)
                @Html.DropDownListFor(cModel => cModel.CounterName, Model.CounterNames, new { @class = "queryParameter" })
            </td>
            <td>
                @Html.LabelFor(cModel => cModel.CounterSource)
                @Html.DropDownListFor(cModel => cModel.CounterSource, Model.CounterSources, new { @class = "queryParameter" })
            </td>
            <td>
                @Html.LabelFor(cModel => cModel.CounterInstance)
                @Html.DropDownListFor(cModel => cModel.CounterInstance, Model.CounterInstances, new { @class = "queryParameter" })
            </td>
            <td>
                @Html.LabelFor(cModel => cModel.CounterExtData)
                @Html.DropDownListFor(cModel => cModel.CounterExtData, Model.CounterExtDatas, new { @class = "queryParameter" })
            </td>
            <td>
                @Html.Label("Series")
                @Html.TextBox("Series","*", new { @class = "queryParameter"})
            </td>
        </tr>
    </table>
    <table width="100%">
        <tr>
            <td>
                @Html.LabelFor(cModel => cModel.StartDate)
                @Html.EditorFor(cModel => cModel.StartDate)
            </td>
            <td>
                @Html.LabelFor(cModel => cModel.EndDate)
                @Html.EditorFor(cModel => cModel.EndDate)
            </td>
            <td>
                <!--input id="drawBtn" type="button" value="Draw" onclick="load()" /-->
                <input id="addCounterBtn" type="button" value="Add Counter" onclick="addCounter()" />
                <br/>
                @Html.Label("Создать на отдельном графике")
                @Html.CheckBox("createOnNewSurfaceChk",true )
                <br/>
                @Html.Label("Автообновление")
                @Html.CheckBox("enableAutoUpdateChk",true )
            </td>
            <td>
                <select id="drawingSurfaces" name="drawingSurfaces" />
                <input id="addDrawingSurfaceBtn" type="button" value="Add Surface" onclick="addSurface()" />
                <input id="saveGraphBtn" type="button" value="Save Graph" onclick="saveGraph()" />
                <input id="loadGraphBtn" type="button" value="Load Graph" onclick="loadGraph()" />
            </td>
              
        </tr>
    </table>
</div>
<script  type="text/javascript">
    var drawers = {};
    var drawingSurfaces = {};
    $("#StartDate").datetimepicker({showSecond: true});
    $("#EndDate").datetimepicker({ showSecond: true });

    function addSurface() {
        var name = prompt('Enter name', '');
        if (name && name != '' && name != null && !drawingSurfaces[name]) {
            createSurface(name);
        }
    }

    
    function loadGraph() {
        var id = prompt('Enter saved graph id', '');
        if (id && id != '' && id != null && !drawingSurfaces[id]) {
            $.get("/Counters/SavedGraph", { id: id })
                .success(function(data) {
                    $.each(drawingSurfaces, function(didx, drawingSurface) {
                        remove(drawingSurface.Id);
                    });
                    $.each(data, function(gidx, graph) {
                        createSurface(graph.surfaceName, function(surfaceData) {
                            $.each(eval(graph.parameters), function(pidx, parameter) {
                                createCounterAndAddToSurface(parameter, surfaceData.id, true);
                            });
                        });
                    });
                });
        }
    }

    function saveGraph() {
        var dataToSave = "";
        $.each(drawingSurfaces, function(index, drawingSurface) {
            dataToSave += drawingSurface.Name + "\r\n";
            dataToSave += drawingSurface.DataUpdaterSettingsToString() + "\r\n";
        });
        $.post("/Counters/SaveGraph", { data: dataToSave }).success(function(data) { showId(data); }).error(function(data) { alert("error"); });
    }


    var showId = function(data) { alert(data.id); };
      
     
     
    function createSurface(name, callback) {
        $.get("/Counters/CountersGraph")
            .success(function(data) {
                onCountersGraphReceived(data, name);
                if (callback)
                    callback(data);
            })
            .error(function(data) { alert("error"); });
    }


    function addCounter() {
        var sd = $("#StartDate").val();
        var ed = $("#EndDate").val();
        var cc = $("#CounterCategory").val();
        var cn = $("#CounterName").val();
        var cs = $("#CounterSource").val();
        var ci = $("#CounterInstance").val();
        var ced = $("#CounterExtData").val();
        var series = $("#Series").val();
        var params = {initialSd: sd, sd: sd, initialEd: ed, ed: ed, cc: cc, cn: cn, cs: cs, ci: ci, ced: ced, series: series };
        var surfaceId = $("#drawingSurfaces").val();
        var enableAutoUpdate = $("#enableAutoUpdateChk").is(':checked');
        if (surfaceId == null || $("#createOnNewSurfaceChk").is(':checked')) {
            createSurface(cc + "_" + cn + "_" + cs + "_" + ci, function (data) {
                createCounterAndAddToSurface(params, data.id, enableAutoUpdate);
            });
        } else {
            createCounterAndAddToSurface(params, surfaceId, enableAutoUpdate);
        }
    }

    function createCounterAndAddToSurface(params, surfaceId, enableAutoUpdate) {
        var dataUpdater = new CountersDataUpdater(params);
        if (enableAutoUpdate)
            dataUpdater.StartAutoUpdate(5000);
        else
            dataUpdater.StartAutoUpdate();
        drawingSurfaces[surfaceId].RegisterDataUpdater(dataUpdater);
    }
    
    
    function load() {
        var sd = $("#StartDate").val();
        var ed = $("#EndDate").val();
        var cc = $("#CounterCategory").val();
        var cn = $("#CounterName").val();
        var cs = $("#CounterSource").val();
        var ci = $("#CounterInstance").val();
        var ced = $("#CounterExtData").val();
        var params = { initialSd: sd, sd: sd, initialEd: ed, ed: ed, cc: cc, cn: cn, cs: cs, ci: ci, ced: ced };
        $.get("/Counters/CountersGraph", params)
            .success(function (data) { onCountersGraphReceived(data, params); })
            .error(function (data) { alert("error"); });

    }

    function onCountersGraphReceived(data, name) {
        $("#drawings").append(data.graphingSurface);
        $("#drawingSurfaces").append($("<option/>", { value: data.id, text: name }));
        drawingSurfaces[data.id] = new DrawingSurface(name, data.id,
            $("#placeholder-" + data.id),
            $("#overview-" + data.id),
            $("#legendContainer-" + data.id));
     
    }

   @*function draw(id, data) {
        drawers[id] = new Drawer($("#placeholder-"+id), $("#overview-"+id), $("#legendContainer-"+id), data);
        drawers[id].UpdateAndDraw(5000);
        drawers[id] = new CountersDataUpdater(data);
        drawers[id].StartAutoUpdate(1000);
    }*@

    function remove(id) {
        $("#drawingSurfaces").find('option[value=' + id + ']').remove();
        drawingSurfaces[id].Dispose();
        //drawers[id].Dispose();
        //delete drawers[id];
        delete drawingSurfaces[id];
        $("#drawings > #drawer-" + id).remove();
    }

    function showParameters(id) {
        alert(drawingSurfaces[id].DataUpdaterSettingsToString());
    }    
   
</script>
<div id ="drawings"/>


